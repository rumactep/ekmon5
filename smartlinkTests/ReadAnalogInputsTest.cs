using System.Text;
using smartlink;
using Xunit;

namespace smartlinkTests;

public class ReadAnalogInputsTest {
    private const string AnalogInputsQuestion4 =
        "820801820804820901820904821001821004821101821104821201821204821301821304821401821404821501821504821601821604821701821704821801821804821901821904822001822004822101822104822201822204822301822304822401822404822501822504822601822604822701822704822801822804822901822904823001823004823101823104823201823204823301823304823401823404823501823504823601823604823701823704823801823804823901823904824001824004824101824104824201824204824301824304824401824404824501824504824601824604824701824704824801824804824901824904825001825004825101825104825201825204825301825304825401825404825501825504825601825604825701825704825801825804825901825904826001826004826101826104826201826204826301826304826401826404826501826504826601826604826701826704826801826804826901826904827001827004827101827104827201827204827301827304827401827404827501827504827601827604827701827704827801827804827901827904828001828004828101828104828201828204828301828304828401828404828501828504828601828604828701828704828801828804828901828904829001829004829101829104829201829204829301829304829401829404829501829504829601829604829701829704829801829804829901829904830001830004830101830104830201830204830301830304830401830404830501830504830601830604830701830704830801830804830901830904831001831004831101831104831201831204831301831304831401831404831501831504831601831604831701831704831801831804831901831904832001832004832101832104832201832204832301832304832401832404832501832504832601832604832701832704832801832804832901832904833001833004833101833104833201833204833301833304833401833404833501833504";

    private const string AnalogInputsQuestion6 =
        "820801820804820806820901820904820906821001821004821006821101821104821106821201821204821206821301821304821306821401821404821406821501821504821506821601821604821606821701821704821706821801821804821806821901821904821906822001822004822006822101822104822106822201822204822206822301822304822306822401822404822406822501822504822506822601822604822606822701822704822706822801822804822806822901822904822906823001823004823006823101823104823106823201823204823206823301823304823306823401823404823406823501823504823506823601823604823606823701823704823706823801823804823806823901823904823906824001824004824006824101824104824106824201824204824206824301824304824306824401824404824406824501824504824506824601824604824606824701824704824706824801824804824806824901824904824906825001825004825006825101825104825106825201825204825206825301825304825306825401825404825406825501825504825506825601825604825606825701825704825706825801825804825806825901825904825906826001826004826006826101826104826106826201826204826206826301826304826306826401826404826406826501826504826506826601826604826606826701826704826706826801826804826806826901826904826906827001827004827006827101827104827106827201827204827206827301827304827306827401827404827406827501827504827506827601827604827606827701827704827706827801827804827806827901827904827906828001828004828006828101828104828106828201828204828206828301828304828306828401828404828406828501828504828506828601828604828606828701828704828706828801828804828806828901828904828906829001829004829006829101829104829106829201829204829206829301829304829306829401829404829406829501829504829506829601829604829606829701829704829706829801829804829806829901829904829906830001830004830006830101830104830106830201830204830206830301830304830306830401830404830406830501830504830506830601830604830606830701830704830706830801830804830806830901830904830906831001831004831006831101831104831106831201831204831206831301831304831306831401831404831406831501831504831506831601831604831606831701831704831706831801831804831806831901831904831906832001832004832006832101832104832106832201832204832206832301832304832306832401832404832406832501832504832506832601832604832606832701832704832706832801832804832806832901832904832906833001833004833006833101833104833106833201833204833206833301833304833306833401833404833406833501833504833506";

    [Fact]
    public void TestAnswerStringBy6() {
        MyClient client = new MyClient();
        Assert.Equal("", client.GetAnswerString(""));
        Assert.Equal("X", client.GetAnswerString("1"));
        Assert.Equal("12345600", client.GetAnswerString("123456"));
        Assert.Equal("12345600X", client.GetAnswerString("1234567"));
        Assert.Equal("1234560065432100", client.GetAnswerString("123456654321"));
        Assert.Equal("1234560065432100X", client.GetAnswerString("1234566543210"));
    }

    [Fact]
    public void TestGetRequestString4() {
        MyClient client = new MyClient();
        string questionString = ElektronikonReader.GetElektronikonRequest4().GetRequestString();
        // _testOutputHelper.WriteLine(questionString);
        Assert.Equal(AnalogInputsQuestion4, questionString);
    }

    private class MyClient{
        public string GetAnswerStringX(string questionString) {
            StringBuilder result = new StringBuilder();
            for (var i = 0; i < questionString.Length / 6; i++) 
                result.Append('X');
            if (questionString.Length % 6 > 0)
                result.Append('X');
            return result.ToString();
        }
        
        public string GetAnswerString(string questionString) {
            StringBuilder result = new StringBuilder();
            for (var i = 0; i < questionString.Length / 6; i++) {
                result.Append(questionString.Substring(i * 6, 6));
                result.Append("00");
            }
            if (questionString.Length % 6 > 0) 
                result.Append('X');
            return result.ToString();
        }
    }
}